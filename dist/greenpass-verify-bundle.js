/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var GreenPassVerify;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/greenpass-verify.js":
/*!*********************************!*\
  !*** ./src/greenpass-verify.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"onLoad\": () => (/* binding */ onLoad),\n/* harmony export */   \"onVerifySignature\": () => (/* binding */ onVerifySignature),\n/* harmony export */   \"onStartScanClick\": () => (/* binding */ onStartScanClick),\n/* harmony export */   \"onStopScanClick\": () => (/* binding */ onStopScanClick),\n/* harmony export */   \"onSelectCameraButtonClick\": () => (/* binding */ onSelectCameraButtonClick)\n/* harmony export */ });\n/*\n * Copyright 2021 Nimrod Zimerman\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/*** SHA256 ***/\n\n// Perform SHA256 over a byte array.\n// Returns a byte array.\nasync function sha256DigestPromise(byteArr) {\n  const hash = await crypto.subtle.digest(\"sha-256\", byteArr);  // Returns promise of ArrayBuffer.\n  return new Uint8Array(hash);\n}\n\n\n/*** Conversion ***/\n\n// Convert a binary string to an ArrayBuffer.\nfunction binaryStrToArrayBuf(str) {\n  const arrBuf = new ArrayBuffer(str.length);\n  const arrBufUint8 = new Uint8Array(arrBuf);\n  for (let t = 0; t < str.length; t++) {\n    arrBufUint8[t] = str.charCodeAt(t);\n  }\n  return arrBuf;\n}\n\n// Convert a UInt8Array to a hex string.\nfunction uint8ArrToHex(uint8Arr) {\n  let hex = \"\";\n  for (const b of uint8Arr) {\n    hex += b.toString(16).padStart(2, \"0\");\n  }\n\n  // Also possible (but less readable) -\n  // let hex = \"\";\n  // uint8Arr.forEach(b => hex += b.toString(16).padStart(2, \"0\"));\n\n  return hex;\n}\n\n// Convert an ArrayBuffer to a hex string.\nfunction arrBufToHex(arrBuf) {\n  return uint8ArrToHex (new Uint8Array(arrBuf));\n}\n\n// Convert a hex string to a UInt8Array array.\nfunction hexToUint8Arr(hex) {\n  let bytes = [];\n  for (let t = 0; t < hex.length; t += 2) {\n    const byte = parseInt(hex.substr(t, 2), 16)\n    bytes.push (byte)\n  }\n  return new Uint8Array(bytes);\n}\n\n\n/*** Crypto ***/\n\nfunction getDerPublicKeyFromPem(pemText) {\n\n  // Based on https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#examples.\n\n  // Fetch Base64 encoded text between PEM markers.\n  const pemHeader = \"-----BEGIN PUBLIC KEY-----\";\n  const pemFooter = \"-----END PUBLIC KEY-----\";\n  const pemHeaderIndex = pemText.indexOf(pemHeader);\n  const pemFooterIndex = pemText.indexOf(pemFooter);\n  const pemBase64Text = pemText.substring(pemHeaderIndex + pemHeader.length, pemFooterIndex);\n\n  // Decode Base64 PEM text to DER.\n  const derBinaryStr = window.atob(pemBase64Text);\n\n  // Convert from a binary string to an ArrayBuffer.\n  const derPublicKey = binaryStrToArrayBuf(derBinaryStr);\n\n  return derPublicKey;\n}\n\n// Import an RSA public key (PEM format).\n// Key is imported with the specified hashing algorithm and as RSASSA-PKCS1-v1_5,\n// for signature verification only.\nfunction importRsaPublicKeyPem(pemText, hashAlgorithm) {\n\n  const derPublicKey = getDerPublicKeyFromPem(pemText);\n\n  return window.crypto.subtle.importKey(\n    \"spki\",  // SubjectPublicKeyInfo format\n    derPublicKey,\n    {  // RsaHashedImportParams algorithm\n      name: \"RSASSA-PKCS1-v1_5\",\n      hash: hashAlgorithm,\n    },\n    true,  // Extractable key\n    [\"verify\"],\n  );\n}\n\n// Import an ECDSA P-256 public key (PEM format).\n// Key is imported for signature verification only.\nfunction importEcdsaPublicKeyPem(pemText) {\n\n  const derPublicKey = getDerPublicKeyFromPem(pemText);\n\n  return window.crypto.subtle.importKey(\n    \"spki\",  // SubjectPublicKeyInfo format\n    derPublicKey,\n    { // EcKeyImportParams algorithm\n      name: \"ECDSA\",\n      namedCurve: \"P-256\",\n    },\n    true,  // Extractable key\n    [\"verify\"],\n  );\n}\n\n// Trim leading zeros (\"00\") in an hex string.\nfunction trimHexLeadingZeros(hexStr) {\n  while (hexStr.substr(0,2) == \"00\") {\n    hexStr = hexStr.substr(2);\n  }\n  return hexStr;\n};\n\n// Convert NIST P-256 signature in ASN.1 DER format to P1363 format.\n// Assumes the signature is of valid format.\n// DER format is used by OpenSSL.\n// P1363 format is used by WebCrypto.\nfunction signatureDerToP1363(derSignature) {\n\n  const derSignatureHex = arrBufToHex(derSignature);\n\n  /* \n   * ASN.1 DER format for signature -\n   *   Ecdsa-Sig-Value  ::=  SEQUENCE  {\n   *     r     INTEGER,\n   *     s     INTEGER  }\n   * (from https://datatracker.ietf.org/doc/html/rfc3278#section-8.2,\n   *  https://datatracker.ietf.org/doc/html/rfc3279#section-2.2.3)\n   * \n   * This is represented in hexa-decimal string as -\n   * \n   *   Offset          Value   Bytes   Description\n   *   ------          -----   -----   -------------------------------\n   *   0               0x30    2       SEQUENCE header\n   *   2               Size    2       Size of the SEQUENCE\n   *   4               0x02    2       INTEGER type\n   *   6               Size    2       Size of the INTEGER \"r\" = size_r\n   *   8               Bytes   size_r  Bytes of the INTEGER \"r\" (big endian)\n   *   8+(size_r*2)    0x02    2       INTEGER type\n   *   8+(size_r*2)+2  Size    2       Size of the INTEGER \"s\" = size_s\n   *   8+(size_r*2)+4  Bytes   size_s  Bytes of the INTEGER \"s\" (big endian)\n   */\n\n  if (parseInt(derSignatureHex.substr(0, 2), 16) != 0x30) {\n    throw \"Expected SEQUENCE at start of signature\";\n  }\n\n  if (parseInt(derSignatureHex.substr(4, 2), 16) != 0x02) {\n    throw \"Expected INTEGER as first value of sequence\";\n  }\n\n  // Parse size of \"r\".\n  const rSizeInHexChars = parseInt(derSignatureHex.substr(6, 2), 16) * 2;\n  // Get \"r\".\n  let r = derSignatureHex.substr(8, rSizeInHexChars);\n\n  if (parseInt(derSignatureHex.substr(8 + rSizeInHexChars, 2), 16) != 0x02) {\n    throw \"Expected INTEGER as second value of sequence\";\n  }\n\n  // Parse size of \"s\".\n  const sSizeInHexChars = parseInt(derSignatureHex.substr(8 + rSizeInHexChars + 2, 2), 16) * 2;\n  // Get \"s\".\n  let s = derSignatureHex.substr(8 + rSizeInHexChars + 4, sSizeInHexChars);\n\n  // Integers might be larger than 32 bytes in ASN.1 (because negative integers need to have a prefix of 0).\n  // Integers must be exactly 32 bytes in P1363 (padded by zeros).\n\n  // Trim all leading zeros from r and s, and pad to 32 bytes.\n  r = trimHexLeadingZeros(r).padStart(32*2, \"0\");\n  s = trimHexLeadingZeros(s).padStart(32*2, \"0\");\n\n  // Make sure the resulting strings are exactly 32 bytes long.\n  if ((r.length != 32*2) || (s.length != 32*2)) {\n    throw \"r or s are not of the expected size\";\n  }\n\n  // Concatenate r and s together - that's P1363 format.\n  return hexToUint8Arr(r + s);\n}\n\n\n/*** Main ***/\n\nvar qrCodeReader = null;\n\nvar scanVerifiedAudio = null;\nvar scanFailedAudio = null;\n\nconst RAMZOR_PUBLIC_KEYS_PEM = {\n  // RSA public key.\n  // From https://github.com/MohGovIL/Ramzor/blob/main/Verification/RSA/RamzorQRPubKey.der.\n  \"IL MOH\": \"-----BEGIN PUBLIC KEY-----\\n\" +\n            \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw4MJrQWgRnYakBsoU/eV\\n\" +\n            \"RxpvDnrGvtidQtfU0o0OGKU+p3H16ufPusBzKLHQPGAoZB33lU8wvfP01xUJTvod\\n\" +\n            \"qoi6KEKXGXC+XreQ1YJDKhIglYfPxJOOcauWf/tmV+w0xph6O3L5/2JrhxEjIbdu\\n\" +\n            \"E8zP8FvZ+KxVFA9LOFQzX7zbbiDUBLCRtIBhwtLCPIiy960O+lVZkMPXg5BrBWjc\\n\" +\n            \"NBrDN62PgOxGXvP3iF0bOlz1+m63q9cFzdKqVfOyl8jZRr3GzYD8SVSXO9EbfYId\\n\" +\n            \"8DEP+HMmqd4StD2X6OMDc9UrBBHx3nGbRpi2D9QuHA/kq/QAjQqnrd+iuzdSwQi+\\n\" +\n            \"mQIDAQAB\\n\" +\n            \"-----END PUBLIC KEY-----\",\n\n  // ECDSA public key - used for most certificates.\n  // Used starting 3-Oct-2021.\n  // Derived from a few signatures using https://github.com/trianglee/greenpass-derive-public-key.\n  \"IL MOHEC\": \"-----BEGIN PUBLIC KEY-----\" +\n              \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEcw+UZUnryP4rqSw+a8xQw4wLHZkc\" +\n              \"u4MDjJP7QeBUEpDt8xh4i4RSIBEJrBkAukSSobRDkwMb0dSCsWwK0rfMgQ==\" +\n              \"-----END PUBLIC KEY-----\",\n             \n  // ECDSA public key - used for \"fast\" medical certificates.\n  // Derived from a few signatures using https://github.com/trianglee/greenpass-derive-public-key.\n  \"IL MOHEC_FAST\": \"-----BEGIN PUBLIC KEY-----\\n\" +\n                   \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEc/E5MuUnnyuhwv5LTFa8clYA/B7y\\n\" +\n                   \"S5tkSWjD4E8o0yxGDT+7095mIVDo65z8yeqVRie5BGDARZYzSfJpRF+TYA==\\n\" +\n                   \"-----END PUBLIC KEY-----\",\n\n  // Old, deprecated certificates -\n\n  // From https://github.com/MohGovIL/Ramzor/blob/main/Verification/ECDSA/RamzorQRPubKeyEC.der.\n  // Was used until 2-Oct-2021.\n  // \"IL MOHEC\": \"-----BEGIN PUBLIC KEY-----\\n\" +\n  //             \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEVD+aucpFLPK3HNnaZ/T/HeFGW84a\\n\" +\n  //             \"gCBnW0Je0CzzDjhWNdNgI0R74uMhqVAiAFOH2NPjPXgQmaNSpdwRhlGXTw==\\n\" +\n  //             \"-----END PUBLIC KEY-----\",\n}\n\nfunction onLoad() {\n\n  onVerifySignature();\n\n  const TIME_BETWEEN_SUCCESSFUL_DECODES_MILLIS = 2000;\n  const TIME_BETWEEN_DECODE_ATTEMPTS_MILLIS = 100;\n  qrCodeReader = new ZXing.BrowserQRCodeReader(TIME_BETWEEN_SUCCESSFUL_DECODES_MILLIS);\n  qrCodeReader.timeBetweenDecodingAttempts = TIME_BETWEEN_DECODE_ATTEMPTS_MILLIS;\n\n  scanVerifiedAudio = new Audio(\"sounds/success.wav\");\n  scanFailedAudio = new Audio(\"sounds/access-denied.wav\");\n}\n\n// Verify the QR code signature.\n// Returns a \"result\" object.\nasync function verifySignature(qrCodeText) {\n\n  var result = new Object();\n  result.text = null;\n  result.signedDataJson = null;\n\n  if (qrCodeText === \"\") {\n    return result;\n  }\n\n  try {\n    const separatorIndex = qrCodeText.indexOf(\"#\");\n    const signatureBase64 = qrCodeText.substr(0, separatorIndex);\n    const signedDataText = qrCodeText.substr(separatorIndex+1);\n\n    var signedDataJson = null;\n    try {\n      signedDataJson = JSON.parse(signedDataText);\n    } catch {\n      result.text = \"ERROR PARSING JSON!\";\n      return result;\n    }\n\n    // Decode signature from Base64.\n    var signature;\n    try {\n      const signatureBinStr = window.atob(signatureBase64);\n      signature = binaryStrToArrayBuf(signatureBinStr);\n    } catch {\n      result.text = \"ERROR DECODING SIGNATURE!\"\n      return result;\n    }\n\n    // Data is signed as UTF-8, encode it as UTF-8 before verification.\n    const encoder = new TextEncoder();\n    var signedData = encoder.encode(signedDataText);\n\n    var signatureType;\n    if (signedDataJson.et === 1) {\n      // \"RSA256-like\" signature type - apply SHA256 over the signed text explicitly\n      // (which is also done by the verify() function below, a second time).\n      signatureType = \"RSA\";\n      signedData = await sha256DigestPromise(signedData);\n    } else if (signedDataJson.et === 2) {\n      // \"RSA256\" signature type - standard verification used, no need to perform \n      // SHA256 explicitly.\n      signatureType = \"RSA\";\n    } else if (signedDataJson.et === 3) {\n      // \"ECDSA NIST P-256 with SHA256 hash\" signature type.\n      signatureType = \"ECDSA\";\n    } else {\n      // Unknown signature type.\n      result.text = \"UNKNOWN SIGNATURE TYPE!\";\n      return result;\n    }\n\n    const publicKeyName = signedDataJson[\"c\"];\n    if (!(publicKeyName in RAMZOR_PUBLIC_KEYS_PEM)) {\n      result.text = \"UNKNOWN PUBLIC KEY!\";\n      return result;\n    }\n    const publicKeyPem = RAMZOR_PUBLIC_KEYS_PEM[publicKeyName];\n\n    var signatureAlgorithm;\n    var publicKey;\n    if (signatureType == \"RSA\") {\n      signatureAlgorithm = \"RSASSA-PKCS1-v1_5\";\n      publicKey = await importRsaPublicKeyPem(publicKeyPem, \"sha-256\");\n    } else if (signatureType == \"ECDSA\") {\n      signatureAlgorithm = {\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n      };\n      publicKey = await importEcdsaPublicKeyPem(publicKeyPem);\n      // Signature needs to be converted from DER format to IEEE P1363 format, as DER\n      // is used by OpenSSL (and by Green Pass), and P1363 is used by WebCrypto.\n      signature = signatureDerToP1363(signature)\n    } else {\n      // Unknown signature type - shouldn't happen.\n      result.text = \"INTERNAL ERROR!\";\n      return result;\n    }\n\n    // Verify public key signature over signed data.\n    const signatureValid = \n      await window.crypto.subtle.verify(signatureAlgorithm, publicKey, signature, signedData);\n\n    if (signatureValid) {\n      result.text = \"Signature valid\"\n      result.signedDataJson = signedDataJson;\n    } else {\n      result.text = \"SIGNATURE NOT VALID!\"\n    }\n  } catch {\n    result.text = \"ERROR CHECKING SIGNATURE!\"\n  }\n\n  return result;\n}\n\nasync function onVerifySignature() {\n\n  const qrCodeText = document.getElementById(\"qrCodeText\").value;\n\n  var qrCodeTextStripped = qrCodeText.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\")\n\n  var verifyResult = await verifySignature(qrCodeTextStripped);\n\n  document.getElementById(\"verifyResult\").value = verifyResult.text;\n\n  if (verifyResult.signedDataJson != null) {\n    // Signature is valid.\n    document.getElementById(\"verifyResult\").className = \"validSignature\";\n    document.getElementById(\"certType\").value = verifyResult.signedDataJson.ct;\n\n    switch (verifyResult.signedDataJson.ct) {\n      case 1:  // Vaccination certificate - without name\n        document.getElementById(\"idNumber\").value = verifyResult.signedDataJson.p[0].idl;\n        document.getElementById(\"name\").value = \"(unknown)\";\n        document.getElementById(\"expiration\").value = verifyResult.signedDataJson.p[0].e;\n        break;\n      case 4:   // \"Fast\" medical certificate\n        document.getElementById(\"idNumber\").value = verifyResult.signedDataJson.idl;\n        document.getElementById(\"name\").value = verifyResult.signedDataJson.g + \" \" + verifyResult.signedDataJson.f;\n        document.getElementById(\"expiration\").value = verifyResult.signedDataJson.e;\n        break;\n      case 2:   // Vaccination certificate - with name\n      case 3:   // Recovery certificate\n      case 6:   // Medical certificate\n      default:  // Hope this type is valid for all other unfamiliar certificate types.\n        document.getElementById(\"idNumber\").value = verifyResult.signedDataJson.idl;\n        document.getElementById(\"name\").value = verifyResult.signedDataJson.gl + \" \" + verifyResult.signedDataJson.fl;\n        document.getElementById(\"expiration\").value = verifyResult.signedDataJson.e;\n        break;\n    }\n\n    return true;\n\n  } else {\n    // Invalid signature.\n    document.getElementById(\"verifyResult\").className = \"invalidSignature\";\n    document.getElementById(\"certType\").value = \"\";\n    document.getElementById(\"idNumber\").value = \"\";\n    document.getElementById(\"name\").value = \"\";\n    document.getElementById(\"expiration\").value = \"\";\n\n    return false;\n  }\n}\n\nfunction displayCameraError(errorStr) {\n  document.getElementById(\"cameraError\").innerText = errorStr;\n}\n\nfunction onStartScanClick() {\n\n  displayCameraError(\"\");\n\n  // By default, use default camera (\"environment\" camera, if available).\n  let cameraId = null;\n\n  let cameraSelect = document.getElementById(\"cameraSelect\");\n  if (cameraSelect.length > 0) {\n    // If user explicitly selected another camera, use it instead.\n    // (-1 indicates \"default camera\").\n    if (cameraSelect.value != -1) {\n      cameraId = cameraSelect.value;\n    }\n  }\n\n  qrCodeReader.decodeFromInputVideoDeviceContinuously(cameraId, 'video', onDecode).catch(onStartScanError);\n}\n\nfunction onStopScanClick() {\n  qrCodeReader.reset();\n}\n\nfunction onSelectCameraButtonClick() {\n  qrCodeReader.listVideoInputDevices().then(devices => {\n    \n    if (devices.length === 0) {\n      displayCameraError(\"No cameras found!\");\n      return;\n    }\n\n    let cameraSelect = document.getElementById(\"cameraSelect\");\n\n    // Clear options list.\n    while (cameraSelect.length > 0) {                \n      cameraSelect.remove(0);\n    }      \n\n    // Add \"default camera\" option.\n    var option = document.createElement(\"option\");\n    option.value = -1;\n    option.text = \"(Default camera)\"\n    cameraSelect.add (option);\n\n    // Add all other listed cameras.\n    for (const device of devices) {\n      var option = document.createElement(\"option\");\n      option.value = device.deviceId;\n      option.text = device.label;\n      cameraSelect.add (option);\n    }\n\n    document.getElementById(\"cameraSelectionDiv\").style.display = \"block\";\n  });  \n}\n\nasync function onDecode(result, error) {\n  if (result !== null) {\n\n    document.getElementById(\"qrCodeText\").value = result;\n    const verified = await onVerifySignature();\n\n    if (verified) {\n      scanVerifiedAudio.play();\n    } else {\n      scanFailedAudio.play();\n    }\n  }\n\n  if (error !== null) {\n    if (error instanceof ZXing.NotFoundException) {\n      // QR code not found - do nothing.\n    } else if (error instanceof ZXing.ChecksumException) {\n      // QR code found but failed checksum validation - do nothing.\n    } else if (error instanceof ZXing.FormatException) {\n      // QR code found but wasn't properly formatted - do nothing.\n    } else {\n      displayCameraError (`Unexpected decode error (${error})`)\n    }\n  }\n}\n\nfunction onStartScanError(error) {\n  displayCameraError(\"Error starting camera!\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/greenpass-verify.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/greenpass-verify.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	GreenPassVerify = __webpack_exports__;
/******/ 	
/******/ })()
;